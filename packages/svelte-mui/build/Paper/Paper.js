import { S as SvelteComponent, i as init, e as element, a as append, s as safe_not_equal, q as create_slot, x as attr, u as toggle_class, h as insert, v as update_slot, t as transition_in, b as transition_out, k as detach, l as assign, o as exclude_internal_props } from '../index-b90fd758.js';

/* src/coffee/Paper/Paper.svelte generated by Svelte v3.29.4 */

function add_css() {
	var style = element("style");
	style.id = "svelte-1f4eu2n-style";
	style.textContent = ".root.svelte-1f4eu2n{--shadow:var(--theme-shadow-0);background-color:var(--theme-palette-background-paper);color:var(--theme-palette-text-primary)\n  }.rounded.svelte-1f4eu2n{border-radius:var(--theme-shape-border-radius)\n  }.outlined.svelte-1f4eu2n{border:1px solid var(--theme-palette-divider)}.elevation.svelte-1f4eu2n{box-shadow:var(--shadow)}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let div_style_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", div_class_value = "root " + /*variant*/ ctx[1] + " " + (/*$$props*/ ctx[3].class || "") + " svelte-1f4eu2n");
			attr(div, "style", div_style_value = "" + (/*style*/ ctx[2] + (/*$$props*/ ctx[3].style || "")));
			toggle_class(div, "rounded", !/*square*/ ctx[0]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (!current || dirty & /*variant, $$props*/ 10 && div_class_value !== (div_class_value = "root " + /*variant*/ ctx[1] + " " + (/*$$props*/ ctx[3].class || "") + " svelte-1f4eu2n")) {
				attr(div, "class", div_class_value);
			}

			if (!current || dirty & /*style, $$props*/ 12 && div_style_value !== (div_style_value = "" + (/*style*/ ctx[2] + (/*$$props*/ ctx[3].style || "")))) {
				attr(div, "style", div_style_value);
			}

			if (dirty & /*variant, $$props, square*/ 11) {
				toggle_class(div, "rounded", !/*square*/ ctx[0]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	var result, style;
	var { square = false } = $$props;
	var { elevation = 1 } = $$props;
	var { variant = "elevation" } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(3, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("square" in $$new_props) $$invalidate(0, square = $$new_props.square);
		if ("elevation" in $$new_props) $$invalidate(4, elevation = $$new_props.elevation);
		if ("variant" in $$new_props) $$invalidate(1, variant = $$new_props.variant);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*variant, result, elevation*/ 146) {
			 $$invalidate(2, style = ($$invalidate(7, result = ""), variant === "elevation"
			? $$invalidate(7, result += `--shadow: var(--theme-shadows-${elevation});`)
			: void 0, result));
		}
	};

	$$props = exclude_internal_props($$props);
	return [square, variant, style, $$props, elevation, $$scope, slots];
}

class Paper extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-1f4eu2n-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { square: 0, elevation: 4, variant: 1 });
	}
}

export default Paper;
