'use strict';

var index = require('../index-aad81066.js');

/* src/coffee/Button/Button.svelte generated by Svelte v3.29.4 */

const { document: document_1 } = index.globals;

function add_css() {
	var style = index.element("style");
	style.id = "svelte-1w1xcxq-style";
	style.textContent = ".root.svelte-1w1xcxq.svelte-1w1xcxq{--color:inherit;overflow:hidden;display:inline-flex;align-items:center;justify-content:center;position:relative;box-sizing:border-box;-webkit-tap-highlight-color:transparent;background-color:transparent;outline:0;border:0;margin:0;border-radius:0;padding:0;cursor:pointer;user-select:none;vertical-align:middle;-moz-appearance:none;-webkit-appearance:none;text-decoration:none;color:var(--color);font-family:var(--theme-typography-button-font-family);font-weight:var(--theme-typography-button-font-weight);font-size:var(--theme-typography-button-font-size);line-height:var(--theme-typography-button-line-height);letter-spacing:var(--theme-typography-button-letter-spacing);text-transform:var(--theme-typography-button-text-transform);min-width:64px;padding:6px 16px;border-radius:var(--theme-shape-border-radius);transition:background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms}.root.svelte-1w1xcxq.svelte-1w1xcxq:hover{text-decoration:none}.root.svelte-1w1xcxq.svelte-1w1xcxq:hover:after{content:'';position:absolute;top:0;left:0;bottom:0;right:0;background-color:var(--theme-palette-text-primary);opacity:var(--theme-palette-action-hover-opacity)}.label.svelte-1w1xcxq.svelte-1w1xcxq{width:100%;display:inherit;align-items:inherit;justify-content:inherit}.text.svelte-1w1xcxq.svelte-1w1xcxq{padding:6px 8px}.text.primary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-primary-main)}.text.primary.svelte-1w1xcxq.svelte-1w1xcxq:hover:after,.outlined.primary.svelte-1w1xcxq.svelte-1w1xcxq:hover:after{content:'';position:absolute;top:0;left:0;bottom:0;right:0;background-color:var(--theme-palette-primary-main);opacity:var(--theme-palette-action-hover-opacity)}.text.secondary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-secondary-main)}.text.secondary.svelte-1w1xcxq.svelte-1w1xcxq:hover:after,.outlined.secondary.svelte-1w1xcxq.svelte-1w1xcxq:hover:after{content:'';position:absolute;top:0;left:0;bottom:0;right:0;background-color:var(--theme-palette-secondary-main);opacity:var(--theme-palette-action-hover-opacity)}.outlined.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-text-primary);padding:5px 15px;border:1px solid var(--color)}.outlined.disabled.svelte-1w1xcxq.svelte-1w1xcxq{border:1px solid var(--theme-palette-action-disabled-background)}.outlined.primary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-primary-main);border:1px solid var(--theme-palette-primary-main)}.outlined.secondary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-secondary-main);border:1px solid var(--theme-palette-secondary-main)}.contained.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-colors-common-black);background-color:var(--theme-colors-grey-300);box-shadow:var(--theme-shadows-2)}.contained.svelte-1w1xcxq.svelte-1w1xcxq:hover{background-color:var(--theme-colors-grey-A100);box-shadow:var(--theme-shadows-4)}.contained.svelte-1w1xcxq.svelte-1w1xcxq:active{box-shadow:var(--theme-shadows-8)}.contained.primary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-primary-contrast-text);background-color:var(--theme-palette-primary-main)}.contained.primary.svelte-1w1xcxq.svelte-1w1xcxq:hover{background-color:var(--theme-palette-primary-dark)}.contained.secondary.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-secondary-contrast-text);background-color:var(--theme-palette-secondary-main)}.contained.secondary.svelte-1w1xcxq.svelte-1w1xcxq:hover{background-color:var(--theme-palette-secondary-dark)}.contained.disabled.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-action-disabled);background-color:var(--theme-palette-action-disabled-background);box-shadow:var(--theme-shadows-0)}.disabled.svelte-1w1xcxq.svelte-1w1xcxq{--color:var(--theme-palette-action-disabled)}.root.inherit.svelte-1w1xcxq.svelte-1w1xcxq{border-color:inherit}.root.svelte-1w1xcxq .icon.start.svelte-1w1xcxq{margin-right:calc(var(--theme-spacing) * 1)}.root.svelte-1w1xcxq .icon.end.svelte-1w1xcxq{margin-left:calc(var(--theme-spacing) * 1)}.root.svelte-1w1xcxq .ripple{position:absolute;border-radius:50%;transform:scale(0);animation:svelte-1w1xcxq-ripple 600ms linear;background-color:var(--color);opacity:0.3}@keyframes svelte-1w1xcxq-ripple{to{transform:scale(4);opacity:0}}";
	index.append(document_1.head, style);
}

const get_end_icon_slot_changes = dirty => ({});
const get_end_icon_slot_context = ctx => ({});
const get_start_icon_slot_changes = dirty => ({});
const get_start_icon_slot_context = ctx => ({});

function create_fragment(ctx) {
	let button;
	let span0;
	let t0;
	let span1;
	let t1;
	let span2;
	let t2;
	let span3;
	let button_class_value;
	let current;
	let mounted;
	let dispose;
	const start_icon_slot_template = /*#slots*/ ctx[6]["start-icon"];
	const start_icon_slot = index.create_slot(start_icon_slot_template, ctx, /*$$scope*/ ctx[5], get_start_icon_slot_context);
	const default_slot_template = /*#slots*/ ctx[6].default;
	const default_slot = index.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[5], null);
	const end_icon_slot_template = /*#slots*/ ctx[6]["end-icon"];
	const end_icon_slot = index.create_slot(end_icon_slot_template, ctx, /*$$scope*/ ctx[5], get_end_icon_slot_context);

	return {
		c() {
			button = index.element("button");
			span0 = index.element("span");
			if (start_icon_slot) start_icon_slot.c();
			t0 = index.space();
			span1 = index.element("span");
			if (default_slot) default_slot.c();
			t1 = index.space();
			span2 = index.element("span");
			if (end_icon_slot) end_icon_slot.c();
			t2 = index.space();
			span3 = index.element("span");
			index.attr(span0, "class", "start icon svelte-1w1xcxq");
			index.attr(span1, "class", "label svelte-1w1xcxq");
			index.attr(span2, "class", "end icon svelte-1w1xcxq");
			index.attr(span3, "class", "ripple");
			button.disabled = /*disabled*/ ctx[2];
			index.attr(button, "class", button_class_value = "root " + /*variant*/ ctx[0] + " " + /*color*/ ctx[1] + " " + /*$$props*/ ctx[4].class + " svelte-1w1xcxq");
			index.toggle_class(button, "disabled", /*disabled*/ ctx[2]);
			index.toggle_class(button, "text", /*variant*/ ctx[0] === "text");
		},
		m(target, anchor) {
			index.insert(target, button, anchor);
			index.append(button, span0);

			if (start_icon_slot) {
				start_icon_slot.m(span0, null);
			}

			index.append(button, t0);
			index.append(button, span1);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			index.append(button, t1);
			index.append(button, span2);

			if (end_icon_slot) {
				end_icon_slot.m(span2, null);
			}

			index.append(button, t2);
			index.append(button, span3);
			current = true;

			if (!mounted) {
				dispose = [
					index.listen(button, "click", function () {
						if (index.is_function(/*createRipple*/ ctx[3])) /*createRipple*/ ctx[3].apply(this, arguments);
					}),
					index.listen(button, "click", /*click_handler*/ ctx[7])
				];

				mounted = true;
			}
		},
		p(new_ctx, [dirty]) {
			ctx = new_ctx;

			if (start_icon_slot) {
				if (start_icon_slot.p && dirty & /*$$scope*/ 32) {
					index.update_slot(start_icon_slot, start_icon_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_start_icon_slot_changes, get_start_icon_slot_context);
				}
			}

			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 32) {
					index.update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[5], dirty, null, null);
				}
			}

			if (end_icon_slot) {
				if (end_icon_slot.p && dirty & /*$$scope*/ 32) {
					index.update_slot(end_icon_slot, end_icon_slot_template, ctx, /*$$scope*/ ctx[5], dirty, get_end_icon_slot_changes, get_end_icon_slot_context);
				}
			}

			if (!current || dirty & /*disabled*/ 4) {
				button.disabled = /*disabled*/ ctx[2];
			}

			if (!current || dirty & /*variant, color, $$props*/ 19 && button_class_value !== (button_class_value = "root " + /*variant*/ ctx[0] + " " + /*color*/ ctx[1] + " " + /*$$props*/ ctx[4].class + " svelte-1w1xcxq")) {
				index.attr(button, "class", button_class_value);
			}

			if (dirty & /*variant, color, $$props, disabled*/ 23) {
				index.toggle_class(button, "disabled", /*disabled*/ ctx[2]);
			}

			if (dirty & /*variant, color, $$props, variant*/ 19) {
				index.toggle_class(button, "text", /*variant*/ ctx[0] === "text");
			}
		},
		i(local) {
			if (current) return;
			index.transition_in(start_icon_slot, local);
			index.transition_in(default_slot, local);
			index.transition_in(end_icon_slot, local);
			current = true;
		},
		o(local) {
			index.transition_out(start_icon_slot, local);
			index.transition_out(default_slot, local);
			index.transition_out(end_icon_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) index.detach(button);
			if (start_icon_slot) start_icon_slot.d(detaching);
			if (default_slot) default_slot.d(detaching);
			if (end_icon_slot) end_icon_slot.d(detaching);
			mounted = false;
			index.run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	var createRipple;
	var { variant = "text" } = $$props;
	var { color = "inherit" } = $$props;
	var { disabled = false } = $$props;

	createRipple = function (event) {
		var button, circle, diameter, radius, ripple;
		button = event.currentTarget;
		circle = document.createElement("span");
		diameter = Math.max(button.clientWidth, button.clientHeight);
		radius = diameter / 2;
		circle.style.width = circle.style.height = `${diameter}px`;

		//circle.style.left = "#{event.clientX - (button.offsetLeft + radius)}px"
		//circle.style.top = "#{event.clientY - (button.offsetTop + radius)}px"
		circle.style.left = `${event.offsetX - radius}px`;

		circle.style.top = `${event.offsetY - radius}px`;
		circle.classList.add("ripple");
		ripple = button.getElementsByClassName("ripple")[0];

		if (ripple) {
			ripple.remove();
		}

		return button.appendChild(circle);
	};

	function click_handler(event) {
		index.bubble($$self, event);
	}

	$$self.$$set = $$new_props => {
		$$invalidate(4, $$props = index.assign(index.assign({}, $$props), index.exclude_internal_props($$new_props)));
		if ("variant" in $$new_props) $$invalidate(0, variant = $$new_props.variant);
		if ("color" in $$new_props) $$invalidate(1, color = $$new_props.color);
		if ("disabled" in $$new_props) $$invalidate(2, disabled = $$new_props.disabled);
		if ("$$scope" in $$new_props) $$invalidate(5, $$scope = $$new_props.$$scope);
	};
	$$props = index.exclude_internal_props($$props);
	return [variant, color, disabled, createRipple, $$props, $$scope, slots, click_handler];
}

class Button extends index.SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-1w1xcxq-style")) add_css();
		index.init(this, options, instance, create_fragment, index.safe_not_equal, { variant: 0, color: 1, disabled: 2 });
	}
}

module.exports = Button;
