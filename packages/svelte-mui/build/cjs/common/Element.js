'use strict';

var index = require('../index-aad81066.js');

/* src/coffee/common/Element.svelte generated by Svelte v3.29.4 */

function create_else_block(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	const switch_instance_spread_levels = [/*$$props*/ ctx[3]];
	var switch_value = /*tag*/ ctx[0];

	function switch_props(ctx) {
		let switch_instance_props = {
			$$slots: { default: [create_default_slot] },
			$$scope: { ctx }
		};

		for (let i = 0; i < switch_instance_spread_levels.length; i += 1) {
			switch_instance_props = index.assign(switch_instance_props, switch_instance_spread_levels[i]);
		}

		return { props: switch_instance_props };
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) index.create_component(switch_instance.$$.fragment);
			switch_instance_anchor = index.empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				index.mount_component(switch_instance, target, anchor);
			}

			index.insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const switch_instance_changes = (dirty & /*$$props*/ 8)
			? index.get_spread_update(switch_instance_spread_levels, [index.get_spread_object(/*$$props*/ ctx[3])])
			: {};

			if (dirty & /*$$scope*/ 64) {
				switch_instance_changes.$$scope = { dirty, ctx };
			}

			if (switch_value !== (switch_value = /*tag*/ ctx[0])) {
				if (switch_instance) {
					index.group_outros();
					const old_component = switch_instance;

					index.transition_out(old_component.$$.fragment, 1, 0, () => {
						index.destroy_component(old_component, 1);
					});

					index.check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					index.create_component(switch_instance.$$.fragment);
					index.transition_in(switch_instance.$$.fragment, 1);
					index.mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) index.transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) index.transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) index.detach(switch_instance_anchor);
			if (switch_instance) index.destroy_component(switch_instance, detaching);
		}
	};
}

// (27:0) {#if isNative}
function create_if_block(ctx) {
	let div;
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = index.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);
	let div_levels = [/*$$props*/ ctx[3]];
	let div_data = {};

	for (let i = 0; i < div_levels.length; i += 1) {
		div_data = index.assign(div_data, div_levels[i]);
	}

	return {
		c() {
			div = index.element("div");
			if (default_slot) default_slot.c();
			index.set_attributes(div, div_data);
		},
		m(target, anchor) {
			index.insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			/*div_binding*/ ctx[5](div);
			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					index.update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}

			index.set_attributes(div, div_data = index.get_spread_update(div_levels, [dirty & /*$$props*/ 8 && /*$$props*/ ctx[3]]));
		},
		i(local) {
			if (current) return;
			index.transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			index.transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) index.detach(div);
			if (default_slot) default_slot.d(detaching);
			/*div_binding*/ ctx[5](null);
		}
	};
}

// (32:2) <svelte:component this={tag} {...$$props}>
function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[4].default;
	const default_slot = index.create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 64) {
					index.update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[6], dirty, null, null);
				}
			}
		},
		i(local) {
			if (current) return;
			index.transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			index.transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*isNative*/ ctx[2]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = index.empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			index.insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				index.group_outros();

				index.transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				index.check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				}

				index.transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			index.transition_in(if_block);
			current = true;
		},
		o(local) {
			index.transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) index.detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { tag } = $$props;
	let element;
	let isNative;

	if (typeof tag === "string") {
		isNative = true;
	} else {
		isNative = false;
	}

	// $: props = $$props
	index.onMount(() => {
		if (!isNative) {
			return;
		}

		// let element = document.querySelectorAll('.element')[0]
		let newElement = document.createElement(tag.toString() || "div");

		newElement.innerHTML = element.innerHTML;
		element.parentNode.insertBefore(newElement, element.nextSibling);
		element.remove();
	});

	function div_binding($$value) {
		index.binding_callbacks[$$value ? "unshift" : "push"](() => {
			element = $$value;
			$$invalidate(1, element);
		});
	}

	$$self.$$set = $$new_props => {
		$$invalidate(3, $$props = index.assign(index.assign({}, $$props), index.exclude_internal_props($$new_props)));
		if ("tag" in $$new_props) $$invalidate(0, tag = $$new_props.tag);
		if ("$$scope" in $$new_props) $$invalidate(6, $$scope = $$new_props.$$scope);
	};

	$$props = index.exclude_internal_props($$props);
	return [tag, element, isNative, $$props, slots, div_binding, $$scope];
}

class Element extends index.SvelteComponent {
	constructor(options) {
		super();
		index.init(this, options, instance, create_fragment, index.safe_not_equal, { tag: 0 });
	}
}

module.exports = Element;
