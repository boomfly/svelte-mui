// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"styles/store.coffee":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.currentTheme = void 0;

var _svelte = require("svelte");

var _store = require("svelte/store");

var currentTheme = (0, _store.writable)('');
exports.currentTheme = currentTheme;
},{}],"styles/Colors.svelte":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _internal = require("svelte/internal");

/* styles/Colors.svelte generated by Svelte v3.24.1 */
const file = "styles/Colors.svelte";

function create_fragment(ctx) {
  const block = {
    c: _internal.noop,
    l: _internal.noop,
    m: _internal.noop,
    p: _internal.noop,
    i: _internal.noop,
    o: _internal.noop,
    d: _internal.noop
  };
  (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props) {
  const writable_props = [];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Colors> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  (0, _internal.validate_slots)("Colors", $$slots, []);
  return [];
}

class Colors extends _internal.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {});
    (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "Colors",
      options,
      id: create_fragment.name
    });
  }

}

var _default = Colors;
exports.default = _default;
},{}],"styles/ThemeProvider.svelte":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _internal = require("svelte/internal");

var _svelte = require("svelte");

var _store = require("svelte/store");

var _Colors = _interopRequireDefault(require("./Colors.svelte"));

var _store2 = require("./store");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* styles/ThemeProvider.svelte generated by Svelte v3.24.1 */
const file = "styles/ThemeProvider.svelte";

function create_fragment(ctx) {
  let colors;
  let current;
  colors = new _Colors.default({
    $$inline: true
  });
  const block = {
    c: function create() {
      (0, _internal.create_component)(colors.$$.fragment);
    },
    l: function claim(nodes) {
      (0, _internal.claim_component)(colors.$$.fragment, nodes);
    },
    m: function mount(target, anchor) {
      (0, _internal.mount_component)(colors, target, anchor);
      current = true;
    },
    p: _internal.noop,
    i: function intro(local) {
      if (current) return;
      (0, _internal.transition_in)(colors.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      (0, _internal.transition_out)(colors.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      (0, _internal.destroy_component)(colors, detaching);
    }
  };
  (0, _internal.dispatch_dev)("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}

function instance($$self, $$props, $$invalidate) {
  var {
    theme = "light"
  } = $$props;
  const writable_props = ["theme"];
  Object.keys($$props).forEach(key => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ThemeProvider> was created with unknown prop '${key}'`);
  });
  let {
    $$slots = {},
    $$scope
  } = $$props;
  (0, _internal.validate_slots)("ThemeProvider", $$slots, []);

  $$self.$$set = $$props => {
    if ("theme" in $$props) $$invalidate(0, theme = $$props.theme);
  };

  $$self.$capture_state = () => ({
    onMount: _svelte.onMount,
    afterUpdate: _svelte.afterUpdate,
    setContext: _svelte.setContext,
    writable: _store.writable,
    Colors: _Colors.default,
    currentTheme: _store2.currentTheme,
    theme
  });

  $$self.$inject_state = $$props => {
    if ("theme" in $$props) $$invalidate(0, theme = $$props.theme);
  };

  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }

  $$self.$$.update = () => {
    if ($$self.$$.dirty &
    /*theme*/
    1) {
      $: _store2.currentTheme.set(theme);
    }

    if ($$self.$$.dirty &
    /*theme*/
    1) {
      $: typeof document !== "undefined" && document !== null ? document.documentElement.className = `theme-${theme}` : void 0;
    }
  };

  return [theme];
}

class ThemeProvider extends _internal.SvelteComponentDev {
  constructor(options) {
    super(options);
    (0, _internal.init)(this, options, instance, create_fragment, _internal.safe_not_equal, {
      theme: 0
    });
    (0, _internal.dispatch_dev)("SvelteRegisterComponent", {
      component: this,
      tagName: "ThemeProvider",
      options,
      id: create_fragment.name
    });
  }

  get theme() {
    throw new Error("<ThemeProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

  set theme(value) {
    throw new Error("<ThemeProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }

}

var _default = ThemeProvider;
exports.default = _default;
},{"./Colors.svelte":"styles/Colors.svelte","./store":"styles/store.coffee"}],"styles/index.coffee":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "currentTheme", {
  enumerable: true,
  get: function () {
    return _store.currentTheme;
  }
});
Object.defineProperty(exports, "ThemeProvider", {
  enumerable: true,
  get: function () {
    return _ThemeProvider.default;
  }
});

var _store = require("./store");

var _ThemeProvider = _interopRequireDefault(require("./ThemeProvider.svelte"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
},{"./store":"styles/store.coffee","./ThemeProvider.svelte":"styles/ThemeProvider.svelte"}],"index.coffee":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "defaultTheme", {
  enumerable: true,
  get: function () {
    return _styles.defaultTheme;
  }
});
Object.defineProperty(exports, "ThemeProvider", {
  enumerable: true,
  get: function () {
    return _styles.ThemeProvider;
  }
});

var _styles = require("./styles");
},{"./styles":"styles/index.coffee"}]},{},["index.coffee"], null)
//# sourceMappingURL=/index.js.map