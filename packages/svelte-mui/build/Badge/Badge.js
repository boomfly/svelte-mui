import { S as SvelteComponent, i as init, e as element, a as append, s as safe_not_equal, q as create_slot, y as space, E as text, x as attr, h as insert, v as update_slot, F as set_data, t as transition_in, b as transition_out, k as detach, l as assign, o as exclude_internal_props } from '../index-b90fd758.js';

/* src/coffee/Badge/Badge.svelte generated by Svelte v3.29.4 */

function add_css() {
	var style = element("style");
	style.id = "svelte-reuneu-style";
	style.textContent = ":root{--badge-radius-standard:10;--badge-radius-dot:4}.root.svelte-reuneu{position:relative;display:inline-flex;vertical-align:middle;flex-shrink:0}.badge.svelte-reuneu{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:center;align-content:center;align-items:center;position:absolute;box-sizing:border-box;font-family:var(--theme-typography-font-family);font-weight:var(--theme-typography-font-weight-medium);font-size:var(--theme-typography-font-size);min-width:calc(var(--badge-radius-standard) * 2);line-height:1;padding:0 6px;height:calc(var(--badge-radius-standard) * 2);border-radius:var(--badge-radius-standard);z-index:1}.primary.svelte-reuneu{background-color:var(--theme-palette-primary-main);color:var(--theme-palette-primary-contrast-text)}";
	append(document.head, style);
}

function create_fragment(ctx) {
	let span1;
	let t0;
	let span0;
	let t1;
	let span0_class_value;
	let span1_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			span1 = element("span");
			if (default_slot) default_slot.c();
			t0 = space();
			span0 = element("span");
			t1 = text(/*badgeContent*/ ctx[1]);
			attr(span0, "class", span0_class_value = "badge " + /*variant*/ ctx[0] + " svelte-reuneu");
			attr(span1, "class", span1_class_value = "root " + (/*$$props*/ ctx[2].class || "") + " svelte-reuneu");
		},
		m(target, anchor) {
			insert(target, span1, anchor);

			if (default_slot) {
				default_slot.m(span1, null);
			}

			append(span1, t0);
			append(span1, span0);
			append(span0, t1);
			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && dirty & /*$$scope*/ 16) {
					update_slot(default_slot, default_slot_template, ctx, /*$$scope*/ ctx[4], dirty, null, null);
				}
			}

			if (!current || dirty & /*badgeContent*/ 2) set_data(t1, /*badgeContent*/ ctx[1]);

			if (!current || dirty & /*variant*/ 1 && span0_class_value !== (span0_class_value = "badge " + /*variant*/ ctx[0] + " svelte-reuneu")) {
				attr(span0, "class", span0_class_value);
			}

			if (!current || dirty & /*$$props*/ 4 && span1_class_value !== (span1_class_value = "root " + (/*$$props*/ ctx[2].class || "") + " svelte-reuneu")) {
				attr(span1, "class", span1_class_value);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(span1);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	var { class: className } = $$props;
	className = "";
	var { variant = "standard" } = $$props;
	var { badgeContent = "" } = $$props;

	$$self.$$set = $$new_props => {
		$$invalidate(2, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
		if ("class" in $$new_props) $$invalidate(3, className = $$new_props.class);
		if ("variant" in $$new_props) $$invalidate(0, variant = $$new_props.variant);
		if ("badgeContent" in $$new_props) $$invalidate(1, badgeContent = $$new_props.badgeContent);
		if ("$$scope" in $$new_props) $$invalidate(4, $$scope = $$new_props.$$scope);
	};

	$$props = exclude_internal_props($$props);
	return [variant, badgeContent, $$props, className, $$scope, slots];
}

class Badge extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-reuneu-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { class: 3, variant: 0, badgeContent: 1 });
	}
}

export default Badge;
